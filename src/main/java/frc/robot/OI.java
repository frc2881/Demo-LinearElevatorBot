// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.commands.DriveForDistance;
import frc.robot.commands.background.drive.*;
import frc.robot.commands.background.rumble.*;
import frc.robot.commands.background.wait.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public JoystickButton driverGreenTriangle;
    public JoystickButton driverBlueX;
    public JoystickButton driverPinkSquare;
    public JoystickButton driverRedCircle;
    public JoystickButton driverPOV;
    public JoystickButton driverOption;
    public JoystickButton driverShare;
    public JoystickButton driverLeftTrigger;
    public JoystickButton driverRightTrigger;
    public JoystickButton driverLeftBumper;
    public JoystickButton driverRightBumper;
    public JoystickButton driverPOV0;
    public JoystickButton driverPOV90;
    public JoystickButton driverPOV180;
    public JoystickButton driverPOV270;
    public JoystickButton manipulatorGreenTriangle;
    public JoystickButton manipulatorBlueX;
    public JoystickButton manipulatorPinkSquare;
    public JoystickButton manipulatorRedCircle;
    public JoystickButton manipulatorOption;
    public JoystickButton manipulatorShare;
    public JoystickButton manipulatorLeftTrigger;
    public JoystickButton manipulatorRightTrigger;
    public JoystickButton manipulatorLeftBumper;
    public JoystickButton manipulatorRightBumper;
    public JoystickButton manipulatorPOV0;
    public JoystickButton manipulatorPOV90;
    public JoystickButton manipulatorPOV180;
    public JoystickButton manipulatorPOV270;
    public JoystickButton manipulatorJoystickButtonLeft;
    public Joystick driver;
    public Joystick manipulator;

    public OI() {

        manipulator = new Joystick(1);
        driver = new Joystick(0);

        // DRIVER //

        // Buttons Pad RIGHT
        driverPinkSquare = new JoystickButton(driver, 1);
        driverPinkSquare.whileHeld(new DoNothing());

        /*driverBlueX = new JoystickButton(driver, 2);
        driverBlueX.whenPressed(new DoNothing());

        driverRedCircle = new JoystickButton(driver, 3);
        driverRedCircle.whenPressed(new FlywheelSwitch());

        driverGreenTriangle = new JoystickButton(driver, 4);
        driverGreenTriangle.whenPressed(new DoNothing());*/

        // Small Buttons
        driverShare = new JoystickButton(driver, 9); // ARCADE DRIVE SWITCH
        driverShare.whileHeld(new DoNothing());

        driverOption = new JoystickButton(driver, 10); // TANK DRIVE SWITCH
        driverOption.whileHeld(new DoNothing());

        //Bumpers
        driverLeftBumper = new JoystickButton(driver, 5); // Climber Leadscrew Down TODO

        driverRightBumper = new JoystickButton(driver, 6); // Climber PistonOut + Leadscrew Up TODO
        driverRightBumper.whileHeld(new DoNothing());

        // POV Pad LEFT
        driverPOV0 = buttonFromPOV(driver, 0); // 
        driverPOV0.whileHeld(new DoNothing());

        driverPOV90 = buttonFromPOV(driver, 90); //
        driverPOV90.whileHeld(new DoNothing());

        driverPOV180 = buttonFromPOV(driver, 180); //
        driverPOV180.whileHeld(new DoNothing());

        driverPOV270 = buttonFromPOV(driver, 270); // 
        driverPOV270.whileHeld(new DoNothing());



        // MANIPULATOR //

        // Buttons Pad RIGHT
    

        // SmartDashboard Buttons
        SmartDashboard.putData("Do Nothing", new DoNothing());
        SmartDashboard.putData("Drive With Joysticks", new DriveWithJoysticks());
        SmartDashboard.putData("Rumble Driver", new RumbleDriver());
        SmartDashboard.putData("Rumble Joysticks", new RumbleJoysticks());
        SmartDashboard.putData("Rumble Yes", new RumbleYes());
        SmartDashboard.putData("Rumble No", new RumbleNo());
        SmartDashboard.putData("Wait Forever", new WaitForever());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    private JoystickButton buttonFromPOV(GenericHID controller, int angle) {
        return new JoystickButton(controller, angle) {
            @Override
            public boolean get() {
                if (angle == 180) {
                    return (controller.getPOV() == 180);
                } else if (angle == 90) {
                    return (controller.getPOV() == 90);
                } else if (angle == 270) {
                    return (controller.getPOV() == 270);
                } else if (angle == 0) {
                    return (controller.getPOV() == 0);
                } else {
                    return false;
                }
            }
        };
    }

    public Joystick getDriver() {
        return driver;
    }

    public Joystick getManipulator() {
        return manipulator;
    }

    public double applyDeadband(double input, double deadband) {
        if(Math.abs(input)<deadband){
            return 0.0;
        }
        else{
            return input;
        }
    }

    // DRIVER Joysticks

    public double getDriverLeftX() {
        return driver.getRawAxis(0);
    }

    public double getDriverLeftY() {
        return driver.getRawAxis(1);
    }

    public double getDriverRightX() {
        return applyDeadband(driver.getRawAxis(2), 0.1);
    }

    public double getDriverRightY() {
        return driver.getRawAxis(5);
    }

    // DRIVER Triggers

    public double getDriverTriggerLeft() {
        return driver.getRawAxis(3);
    }

    public double getDriverTriggerRight() {
        return driver.getRawAxis(4);
    }

    // MANIPULATOR Triggers

    public double getManipulatorTriggerLeft() {
        return (manipulator.getRawAxis(3) + 1.0) / 2.0;
    }

    public double getManipulatorTriggerRight() {
        return (manipulator.getRawAxis(4) + 1.0) / 2.0;
    }

    // MANIPULATOR Joysticks
    public double getManipulatorLeftX() {
        return manipulator.getRawAxis(0);
    }

    public double getManipulatorLeftY() {
        return manipulator.getRawAxis(1);
    }

    public double getManipulatorRightX() {
        return manipulator.getRawAxis(2);
    }

    public double getManipulatorRightY() {
        return manipulator.getRawAxis(5);
    }

}
