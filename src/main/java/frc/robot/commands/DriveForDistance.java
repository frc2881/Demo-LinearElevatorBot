// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;

/**
 *
 */
public class DriveForDistance extends Command {

    private double setpoint;

    public DriveForDistance(double setpointFeet) {
        requires(Robot.drive);
        this.setpoint = setpointFeet * 12;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.logInitialize(this);
        Robot.log("Starting to drive autonomously for " + setpoint / 12 + " feet!");
        Robot.drive.resetDriveEncoders();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double time = timeSinceInitialized();
        double speed;
        double position = Robot.drive.getDrivePosition();
        double maxSpeed = 0.4;

        // Sets the minimum and maximum speed of the robot during the command
        if (time < 2) {
            speed = Math.copySign(time * maxSpeed / 2, setpoint);
        } else if (Math.abs(setpoint - position) > 2) {
            speed = (setpoint - position) * 0.2;
        } else {
            speed = 0;
        }

        if (Math.abs(speed) > maxSpeed) {
            speed = Math.copySign(maxSpeed, speed);
        } else if (Math.abs(speed) < 0.05) {
            speed = 0;
        }

        Robot.drive.tankDrive(speed, speed);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return Math.abs(setpoint - Robot.drive.getDrivePosition()) <= 2;
    }

    // Called once after isFinished returns true
    @Override
    protected void interrupted() {
        Robot.logInterrupted(this);
        Robot.drive.tankDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void end() {
        Robot.logEnd(this);
        Robot.drive.tankDrive(0, 0);
    }
}